---
import "../styles/terminal.css";
import type { Command } from "../lib/terminal.ts";

const { commands = null } = Astro.props as { commands?: Command[] };
---

<div class="terminal" id="main-terminal"></div>

<script define:vars={{ commands }}>
  function initializeTerminal() {
    const terminalContainer = document.getElementById("main-terminal");
    if (!terminalContainer) return;

    const staticTypeDelay = 5; // A bit faster for the initial boot sequence
    const commandTypeDelay = 50;

    const asciiArt = `
██╗  ██╗███████╗██╗     ██╗      ██████╗
██║  ██║██╔════╝██║     ██║     ██╔═══██╗
███████║█████╗  ██║     ██║     ██║   ██║
██╔══██║██╔══╝  ██║     ██║     ██║   ██║
██║  ██║███████╗███████╗███████╗╚██████╔╝
╚═╝  ╚═╝╚══════╝╚══════╝╚══════╝ ╚═════╝
`;

    const staticContent = {
      systemInfo: `SYSTEM STATUS: ONLINE\nVERSION: 1.0.2\nLAST UPDATE: 2024-07-31`,
      about: `<h3>[ ABOUT ]</h3><p>Astro-Blog is a multi-purpose, accessible, and SEO-friendly theme for Astro blogs.</p>`,
      contact: `<h3>[ CONTACT ]</h3><div class="contact-grid"><p><span>GitHub:</span> <a href="https://github.com/your-username" target="_blank">https://github.com/your-username</a></p><p><span>Twitter:</span> <a href="https://twitter.com/your-handle" target="_blank">https://twitter.com/your-handle</a></p><p><span>Email:</span> <a href="mailto:your-email@example.com">your-email@example.com</a></p></div>`,
    };

    const dynamicCommands = commands && commands.length > 0 ? commands : [
        { cmd: "ls -a", output: "projects/  about.txt  contact.md\n" },
        { cmd: "cat README.md", output: "Hello! Welcome to the portfolio.\n" },
    ];

    // New, robust typeText function that correctly handles HTML tags.
    function typeText(target, text, delay, callback) {
      let i = 0;
      target.innerHTML = "";
      function next() {
        if (i < text.length) {
          let char = text[i];
          if (char === '<') {
            const tagEnd = text.indexOf('>', i);
            if (tagEnd !== -1) {
              target.innerHTML += text.substring(i, tagEnd + 1);
              i = tagEnd + 1;
              setTimeout(next, delay); // Still use delay for tags to pace rendering
              return;
            }
          }
          target.innerHTML += char;
          i++;
          setTimeout(next, delay);
        } else if (callback) {
          callback();
        }
      }
      next();
    }

    // Create structure
    terminalContainer.innerHTML = `
      <div class="grid-container">
        <pre class="grid-item top-left ascii-art"></pre>
        <pre class="grid-item top-right system-info"></pre>
        <div class="grid-item bottom-left about-box"></div>
        <div class="grid-item bottom-right contact-links"></div>
      </div>
      <div class="animation-container"></div>
    `;

    const asciiEl = terminalContainer.querySelector(".ascii-art");
    const systemEl = terminalContainer.querySelector(".system-info");
    const aboutEl = terminalContainer.querySelector(".about-box");
    const contactEl = terminalContainer.querySelector(".contact-links");
    const animationEl = terminalContainer.querySelector(".animation-container");

    // Unified Animation Sequence
    typeText(asciiEl, asciiArt, 1, () => {
      typeText(systemEl, staticContent.systemInfo, staticTypeDelay, () => {
        typeText(aboutEl, staticContent.about, staticTypeDelay, () => {
          typeText(contactEl, staticContent.contact, staticTypeDelay, () => {
            const logContainer = document.createElement("div");
            const cursor = document.createElement("span");
            cursor.className = "cursor";
            animationEl.appendChild(logContainer);
            animationEl.appendChild(cursor);

            function runCommand(index) {
              if (index >= dynamicCommands.length) {
                setTimeout(() => { logContainer.innerHTML = ""; runCommand(0); }, 3000);
                return;
              }
              const cmdLine = "$ " + dynamicCommands[index].cmd;
              const outputText = dynamicCommands[index].output;
              const cmdElement = document.createElement("span");
              cmdElement.className = "terminal-command";
              logContainer.appendChild(cmdElement);
              typeText(cmdElement, cmdLine, commandTypeDelay, () => {
                const outputElement = document.createElement("span");
                outputElement.className = "terminal-output";
                logContainer.appendChild(outputElement);
                typeText(outputElement, outputText, commandTypeDelay, () => runCommand(index + 1));
              });
            }
            runCommand(0);
          });
        });
      });
    });
  }

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initializeTerminal);
  } else {
    initializeTerminal();
  }
</script>
